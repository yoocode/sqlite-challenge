find out the properties(columns) of the tables within music.db using .schema

sqlite> .schema
CREATE TABLE songs (_id INTEGER PRIMARY KEY, track INTEGER, title TEXT NOT NULL, album INTEGER);
CREATE TABLE albums (_id INTEGER PRIMARY KEY, name TEXT NOT NULL, artist INTEGER);
CREATE TABLE artists (_id INTEGER PRIMARY KEY, name TEXT NOT NULL);
CREATE VIEW album_list AS
SELECT name FROM albums
ORDER BY name COLLATE NOCASE;
CREATE VIEW artist_list AS
SELECT artists.name AS artist, albums.name AS albums, songs.track, songs.title FROM songs
INNER JOIN albums ON songs.album = albums._id
INNER JOIN artists ON albums.artist = artists._id
ORDER BY artists.name, albums.name, songs.track;

turn on headers by .headers on

1. Select the titles of all the songs on the album "Forbidden".

Ans: 
SELECT songs.title FROM songs 
INNER JOIN albums
ON songs.album = albums._id
WHERE albums.name = 'Forbidden';

2.Repeat the previous query but this time display the songs in track order. You may want to 
include the track number in the output to verify that it worked ok.

Ans: 
SELECT songs.track, songs.title FROM songs 
INNER JOIN albums
ON songs.album = albums._id
WHERE albums.name = 'Forbidden'
ORDER BY songs.track;

3. Display all songs for the band "Deep Purple".

Ans:
SELECT songs.title FROM songs
INNER JOIN albums
ON songs.album = albums._id
INNER JOIN artists
ON albums.artist = artists._id
WHERE artists.name = 'Deep Purple';

4. Rename the band "Mehitabel" to "One Kitten". Note that this is an exception to the advice
to always fuly qualify your column names. SET artists.name won't work, you just need to specify name.

Ans:
UPDATE artists
SET name = 'One Kitten'
WHERE artists.name = 'Mehitabel';

5. Check that the record was correctly renamed.

Ans;
SELECT albums._id, albums.name from albums 
INNER JOIN artists
ON albums.artist = artists._id
WHERE artists.name = 'One Kitten';

SELECT songs.track, songs.title FROM songs
INNER JOIN albums 
ON songs.album = albums._id
WHERE albums._id = 173;

6. Select the titles of all the songs by Aerosmith in alphabetical order.

Ans:
SELECT songs.title FROM songs
INNER JOIN albums
ON songs.album = albums._id
INNER JOIN artists
ON albums.artist = artists._id
WHERE artists.name = 'Aerosmith'
ORDER BY songs.title COLLATE NOCASE ASC;

7. Replace the column that you used in the previous answer with count (title) to get just a count of
the number of songs.

Ans:
SELECT count(songs.title) FROM songs
INNER JOIN albums
ON songs.album = albums._id
INNER JOIN artists
ON albums.artist = artists._id
WHERE artists.name = 'Aerosmith';

8. Search the internet to find out how to get a list of the songs from step 6 without any duplicates.

Ans:
SELECT DISTINCT songs.title FROM songs
INNER JOIN albums
ON songs.album = albums._id
INNER JOIN artists
ON albums.artist = artists._id
WHERE artists.name = 'Aerosmith'
ORDER BY songs.title COLLATE NOCASE ASC;

9. Search the internet again to find out how to get a count of the songs without duplicates.
Hint: It uses the same keyword as step 8 but the syntax may not be obvious.

Ans:
SELECT count (DISTINCT songs.title) FROM songs
INNER JOIN albums
ON songs.album = albums._id
INNER JOIN artists
ON albums.artist = artists._id
WHERE artists.name = 'Aerosmith';

10. Repeat the previous query to find the number of artists (which, obviously, should be one) and the number of albums.

Ans:
SELECT count (DISTINCT artists.name) FROM songs
INNER JOIN albums
ON songs.album = albums._id
INNER JOIN artists
ON albums.artist = artists._id
WHERE artists.name = 'Aerosmith';

SELECT count (DISTINCT albums.name) FROM songs
INNER JOIN albums
ON songs.album = albums._id
INNER JOIN artists
ON albums.artist = artists._id
WHERE artists.name = 'Aerosmith';









